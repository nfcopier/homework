%skeleton "lalr1.cc"

%code requires {
    #include <string.h>
    #include "StatementController.h"
    #include "FunctionController.h"
    #include "ParserInterface.h"
    extern int yyleng;
}

%code {

extern unsigned int yylineno;

int yylex(yy::parser::semantic_type* const $1);
void yy::parser::error(const std::string& error) {
    std::cerr << error << " on line: " << yylineno << std::endl;
}
}

%define api.value.type variant

%token DOT_OPERATOR
%token STATEMENT_TERMINATOR
%token COLON
%token OPENING_BRACKET
%token CLOSING_BRACKET
%token OPENING_PARENTHESIS
%token CLOSING_PARENTHESIS
%token ASSIGNMENT_OPERATOR
%token COMMA

%token CONST_KEYWORD
%token TYPE_KEYWORD
%token RECORD_KEYWORD
%token END_KEYWORD
%token ARRAY_KEYWORD
%token OF_KEYWORD
%token VARIABLE_KEYWORD
%token PROCEDURE_KEYWORD
%token FORWARD_KEYWORD
%token FUNCTION_KEYWORD
%token REFERENCE_KEYWORD
%token BEGIN_KEYWORD
%token IF_KEYWORD
%token THEN_KEYWORD
%token ELSEIF_KEYWORD
%token ELSE_KEYWORD
%token WHILE_KEYWORD
%token DO_KEYWORD
%token REPEAT_KEYWORD
%token UNTIL_KEYWORD
%token FOR_KEYWORD
%token TO_KEYWORD
%token DOWNTO_KEYWORD
%token STOP_KEYWORD
%token RETURN_KEYWORD
%token READ_KEYWORD
%token WRITE_KEYWORD

%left OR_OPERATOR
%right AND_OPERATOR
%right NOT_OPERATOR
%nonassoc
    EQUALS_SIGN
    NON_EQUIVALENCE_OPERATOR
    LESS_THAN_OPERATOR
    LESS_EQUAL_OPERATOR
    GREATER_THAN_OPERATOR
    GREATER_EQUAL_OPERATOR
%left
    PLUS_SIGN
    MINUS_SIGN
%left
    MULTIPLY_SIGN
    DIVIDE_SIGN
    MODULO_SIGN
%right UNARY_MINUS

%token CHR_KEYWORD
%token ORD_KEYWORD
%token PRED_KEYWORD
%token SUCC_KEYWORD

%token IDENTIFIER
%token NUMERIC_LITERAL
%token STRING_LITERAL
%token CHARACTER_LITERAL
%start program

%type <int> NUMERIC_LITERAL
%type <char*> STRING_LITERAL
%type <char*> CHARACTER_LITERAL

%type <std::vector<std::string*>*> identifier_list
%type <char*> IDENTIFIER
%type <std::string*> type
%type <IdentifierList*> identifiers_by_type
%type <std::vector<IdentifierList*>*> identifiers_by_type_list
%type <IExpression*> no_l_expression
%type <IExpression*> expression

%type <IExpression*> or_expression
%type <IExpression*> and_expression
%type <IExpression*> equivalence
%type <IExpression*> non_equivalence
%type <IExpression*> less_than_comparison
%type <IExpression*> less_equal_comparison
%type <IExpression*> greater_than_comparison
%type <IExpression*> greater_equal_comparison
%type <IExpression*> addition
%type <IExpression*> subtraction
%type <IExpression*> multiplication
%type <IExpression*> division
%type <IExpression*> modulo_division
%type <IExpression*> not_expression
%type <IExpression*> negation
%type <IExpression*> parenthetic_expression
%type <IExpression*> character_cast
%type <IExpression*> ordinal_cast
%type <IExpression*> predecessor
%type <IExpression*> successor
%type <ExpressionInRegister*> function_call
%type <Literal*> literal
%type <Symbol*> l_value
%type <std::vector<Symbol*>*> l_value_list
%type <std::vector<IParameter*>*> parameters_maybe
%type <std::vector<IParameter*>*> parameters
%type <IParameter*> parameter

%type <WhileStatement*> while_header
%type <RepeatStatement*> repeat_header
%type <IfChain*> if_variable
%type <RangeType> to_or_downto
%type <ForLoop*> for_variable
%type <FunctionDefinition*> function_declaration
%type <ParameterDeclaration*> parameter_declaration
%type <std::vector<ParameterDeclaration*>*> parameter_declaration_list
%type <std::vector<ParameterDeclaration*>*> parameter_list_maybe
%type <bool> var_or_ref_keyword

%%

program:
    { ParserInterface::Instance().StartProgram(); }
    constant_declaration_list_maybe
    type_declaration_list_maybe
    variable_declaration_list_maybe
    call_definition_list_maybe
    { ParserInterface::Instance().StartMain(); }
    block
    DOT_OPERATOR
    { ParserInterface::Instance().EndProgram(); }
;

constant_declaration_list_maybe:
    %empty
|   CONST_KEYWORD
    constant_declaration_list
;

constant_declaration_list:
    constant_declaration
|   constant_declaration_list
    constant_declaration
;

constant_declaration:
    IDENTIFIER
    EQUALS_SIGN
    expression
    STATEMENT_TERMINATOR
;

type_declaration_list_maybe:
    %empty
|   TYPE_KEYWORD
    type_declaration_list
;

type_declaration_list:
    type_declaration
|   type_declaration_list
    type_declaration
;

type_declaration:
    IDENTIFIER
    EQUALS_SIGN
    type
    STATEMENT_TERMINATOR
;

type:
    IDENTIFIER  { $$ = new std::string($1); }
|   record_type { $$ = new std::string("record"); }
|   array_type  { $$ = new std::string("array"); }
;

record_type:
    RECORD_KEYWORD
    identifiers_by_type_list_maybe
    END_KEYWORD
;

identifiers_by_type_list_maybe:
    %empty
|   identifiers_by_type_list
;

array_type:
    ARRAY_KEYWORD
    OPENING_BRACKET
    expression
    COLON
    expression
    CLOSING_BRACKET
    OF_KEYWORD
    type
;

variable_declaration_list_maybe:
    %empty
|   VARIABLE_KEYWORD
    identifiers_by_type_list
    { ParserInterface::Instance().AddVariables($2); }
;

identifiers_by_type_list:
    identifiers_by_type
    STATEMENT_TERMINATOR
    { $$ = new std::vector<IdentifierList*>(); $$->push_back($1); }
|   identifiers_by_type_list
    identifiers_by_type
    STATEMENT_TERMINATOR
    { $$ = $1; $$->push_back($2); }
;

identifiers_by_type:
    identifier_list
    COLON
    IDENTIFIER
    { $$ = new IdentifierList( new std::string($3), $1 ); }
;

identifier_list:
    IDENTIFIER
    { $$ = new std::vector<std::string*>(); $$->push_back(new std::string($1)); }
|   identifier_list
    COMMA
    IDENTIFIER
    { $$ = $1; $$->push_back(new std::string($3)); }
;

call_definition_list_maybe:
    %empty
|   call_definition_list
;

call_definition_list:
    call_definition
|   call_definition_list
    call_definition
;

call_definition:
    procedure_declaration
|   function_declaration
;

procedure_declaration:
    PROCEDURE_KEYWORD
    IDENTIFIER
    OPENING_PARENTHESIS
    parameter_list_maybe
    CLOSING_PARENTHESIS
    STATEMENT_TERMINATOR
    function_body
    STATEMENT_TERMINATOR
;

function_declaration:
    FUNCTION_KEYWORD
    function_declaration
    { ParserInterface::Instance().Set( $2 ); }
    { FunctionController::Instance().Set( $2 ); }
    COLON
    IDENTIFIER
    { FunctionController::Instance().SetReturnTypeAs( new std::string($6) ); }
    STATEMENT_TERMINATOR
    function_body
    STATEMENT_TERMINATOR
    { ParserInterface::Instance().ClearFunction(); }
;

function_declaration:
    IDENTIFIER
    OPENING_PARENTHESIS
    parameter_list_maybe
    CLOSING_PARENTHESIS
    { $$ = new FunctionDefinition( new std::string($1), $3); }
;

parameter_list_maybe:
    %empty
    { $$ = new std::vector<ParameterDeclaration*>(); }
|   parameter_declaration_list
    { $$ = $1; }
;

parameter_declaration_list:
    parameter_declaration
    { $$ = new std::vector<ParameterDeclaration*>(); $$->push_back( $1 ); }
|   parameter_declaration_list
    STATEMENT_TERMINATOR
    parameter_declaration
    { $$ = $1; $$->push_back( $3 ); }
;

parameter_declaration:
    var_or_ref_keyword
    identifiers_by_type
    { $$ = new ParameterDeclaration( $1, $2 ); }
;

var_or_ref_keyword:
    %empty { $$ = false; }
|   VARIABLE_KEYWORD { $$ = false; }
|   REFERENCE_KEYWORD { $$ = true; }

function_body:
    FORWARD_KEYWORD
    { FunctionController::Instance().Declare(); }
|   { FunctionController::Instance().Start(); }
    body
    { FunctionController::Instance().CreateEpilogue(); }
    { FunctionController::Instance().CreatePrologue(); }
;

body:
    constant_declaration_list_maybe
    type_declaration_list_maybe
    variable_declaration_list_maybe
    block
;

block:
    BEGIN_KEYWORD
    statement_sequence
    END_KEYWORD
;

statement_sequence:
    statement
|   statement_sequence
    STATEMENT_TERMINATOR
    statement
;

statement:
    assignment
|   if_statement
|   while_statement
|   repeat_statement
|   for_statement
|   stop_statement
|   return_statement
|   read_statement
|   write_statement
|   procedure_call
|   null_statement
;

assignment:
    l_value
    ASSIGNMENT_OPERATOR
    expression
    { ParserInterface::Instance().Assign($1, $3); }
;

if_statement:
    IF_KEYWORD
    { StatementController::Instance().Set(new IfChain()); }
    if_variable
    expression
    { StatementController::Instance().Test( $3, $4 ); }
    THEN_KEYWORD
    statement_sequence
    { StatementController::Instance().Set( $3 ); }
    else_if_sequence_maybe
    else_declaration_maybe
    { StatementController::Instance().End( $3 ); }
    END_KEYWORD
;

else_if_sequence_maybe:
    %empty
|   else_if_sequence
;

else_if_sequence:
    else_if_declaration
|
    else_if_sequence
    else_if_declaration
;

else_if_declaration:
    ELSEIF_KEYWORD
    if_variable
    { StatementController::Instance().AddElseTo( $2 ); }
    expression
    { StatementController::Instance().Test( $2, $4 ); }
    THEN_KEYWORD
    statement_sequence
    { StatementController::Instance().Set( $2 ); }
;

else_declaration_maybe:
    if_variable
    { StatementController::Instance().EndElseIn( $1 ); }
|   ELSE_KEYWORD
    if_variable
    { StatementController::Instance().AddElseTo( $2 ); }
    statement_sequence
;

if_variable:
    %empty
    { $$ = StatementController::Instance().GetIfChain(); }
;

while_statement:
    WHILE_KEYWORD
    while_header
    { StatementController::Instance().Start( $2 ); }
    expression
    { StatementController::Instance().Test( $2, $4 ); }
    DO_KEYWORD
    statement_sequence
    {
        StatementController::Instance().End( $2 );
        delete $2;
    }
    END_KEYWORD
;

while_header:
    %empty
    { $$ = new WhileStatement(); }
;

repeat_statement:
    repeat_header
    statement_sequence
    UNTIL_KEYWORD
    expression
    { StatementController::Instance().Test( $1, $4 ); }
;

repeat_header:
    REPEAT_KEYWORD
    { $$ = StatementController::Instance().StartRepeat(); }
;

for_statement:
    FOR_KEYWORD
    for_variable
    IDENTIFIER
    ASSIGNMENT_OPERATOR
    expression
    {
        auto rangeVariable = ParserInterface::Instance().GetSymbolFor( new std::string($3) );
        ParserInterface::Instance().Assign( rangeVariable, $5 );
        $2->Set( (Variable*)rangeVariable );
    }
    to_or_downto
    expression
    {
        auto stopVariable = $2->GetStopVariable();
        ParserInterface::Instance().Assign( stopVariable, $8 );
    }
    DO_KEYWORD
    {
        StatementController::Instance().Start( $2 );
        $2->Set( $7 );
        auto condition = StatementController::Instance().DoComparisonFor( $2 );
        StatementController::Instance().Test( $2, condition );
    }
    statement_sequence
    {
        StatementController::Instance().UpdateRangeVariableFor( $2 );
        StatementController::Instance().End( $2 );
        delete $2;
    }
    END_KEYWORD
;

for_variable:
    %empty
    { $$ = new ForLoop(); }
;

to_or_downto:
    TO_KEYWORD
    { $$ = RangeType::To; }
|   DOWNTO_KEYWORD
    { $$ = RangeType::DownTo; }
;

stop_statement:
    STOP_KEYWORD
;

return_statement:
    RETURN_KEYWORD
    expression
    { FunctionController::Instance().Return( $2 ); }
|   RETURN_KEYWORD
    { FunctionController::Instance().Return(); }
;

read_statement:
    READ_KEYWORD
    OPENING_PARENTHESIS
    l_value_list
    CLOSING_PARENTHESIS
    { ParserInterface::Instance().Read($3); }
;

l_value_list:
    l_value {
        $$ = new std::vector<Symbol*>();
        $$->push_back($1);
    }
|   l_value_list
    COMMA
    l_value {
        $$ = $1;
        $$->push_back($3);
    }
;

write_statement:
    WRITE_KEYWORD
    OPENING_PARENTHESIS
    parameters
    CLOSING_PARENTHESIS
    { ParserInterface::Instance().Write( $3 ); }
;

null_statement:
    %empty
;

expression:
    no_l_expression
    { $$ = $1; }
|   l_value
    { $$ = ParserInterface::Instance().GetExpressionFrom( $1 ); }
;

no_l_expression:
    or_expression { $$ = $1; }
|   and_expression { $$ = $1; }
|   equivalence { $$ = $1; }
|   non_equivalence { $$ = $1; }
|   less_than_comparison { $$ = $1; }
|   less_equal_comparison { $$ = $1; }
|   greater_than_comparison { $$ = $1; }
|   greater_equal_comparison { $$ = $1; }
|   addition { $$ = $1; }
|   subtraction { $$ = $1; }
|   multiplication { $$ = $1; }
|   division { $$ = $1; }
|   modulo_division { $$ = $1; }
|   not_expression { $$ = $1; }
|   negation { $$ = $1; }
|   parenthetic_expression { $$ = $1; }
|   character_cast { $$ = $1; }
|   ordinal_cast { $$ = $1; }
|   predecessor { $$ = $1; }
|   successor { $$ = $1; }
|   literal { $$ = $1; }
|   function_call { $$ = $1; }

or_expression:
    expression
    OR_OPERATOR
    expression
    { $$ = ParserInterface::Instance().Or($1, $3); }
;
and_expression:
    expression
    AND_OPERATOR
    expression
    { $$ = ParserInterface::Instance().And($1, $3); }
;
equivalence:
    expression
    EQUALS_SIGN
    expression
    { $$ = ParserInterface::Instance().CompareEqual($1, $3); }
;
non_equivalence:
    expression
    NON_EQUIVALENCE_OPERATOR
    expression
    { $$ = ParserInterface::Instance().CompareNotEqual($1, $3); }
;
less_than_comparison:
    expression
    LESS_THAN_OPERATOR
    expression
    { $$ = ParserInterface::Instance().CompareGreater($3, $1); }
;
less_equal_comparison:
    expression
    LESS_EQUAL_OPERATOR
    expression
    { $$ = ParserInterface::Instance().CompareGreaterOrEqual($3, $1); }
;
greater_than_comparison:
    expression
    GREATER_THAN_OPERATOR
    expression
    { $$ = ParserInterface::Instance().CompareGreater($1, $3); }
;
greater_equal_comparison:
    expression
    GREATER_EQUAL_OPERATOR
    expression
    { $$ = ParserInterface::Instance().CompareGreaterOrEqual($1, $3); }
;
addition:
    expression
    PLUS_SIGN
    expression
    { $$ = ParserInterface::Instance().Add($1, $3); }
;
subtraction:
    expression
    MINUS_SIGN
    expression
    { $$ = ParserInterface::Instance().Subtract($1, $3); }
;
multiplication:
    expression
    MULTIPLY_SIGN
    expression
    { $$ = ParserInterface::Instance().Multiply($1, $3); }
;
division:
    expression
    DIVIDE_SIGN
    expression
    { $$ = ParserInterface::Instance().Divide($1, $3); }
;
modulo_division:
    expression
    MODULO_SIGN
    expression
    { $$ = ParserInterface::Instance().Modulo($1, $3); }
;
not_expression:
    NOT_OPERATOR
    expression
    { $$ = ParserInterface::Instance().Not($2); delete $2; }
;
negation:
    MINUS_SIGN %prec UNARY_MINUS
    expression
    { $$ = ParserInterface::Instance().Negate($2); delete $2; }
;

parenthetic_expression:
    OPENING_PARENTHESIS
    expression
    CLOSING_PARENTHESIS
    { $$ = $2; }
;

function_call:
    IDENTIFIER
    OPENING_PARENTHESIS
    parameters_maybe
    CLOSING_PARENTHESIS
    { $$ = FunctionController::Instance().CallFunction( new std::string($1), $3 ); }
;

procedure_call:
    IDENTIFIER
    OPENING_PARENTHESIS
    parameters_maybe
    CLOSING_PARENTHESIS
    { FunctionController::Instance().CallProcedure( new std::string($1), $3 ); }
;

parameters_maybe:
    %empty
    { $$ = new std::vector<IParameter*>(); }
|   parameters
    { $$ = $1; }
;

parameters:
    parameter
    { $$ = new std::vector<IParameter*>(); $$->push_back( $1 ); }
|   parameters
    COMMA
    parameter
    { $$ = $1; $$->push_back( $3 ); }
;

parameter:
    l_value
    { $$ = ParserInterface::Instance().GetParameterFrom( $1 ); }
|   no_l_expression
    { $$ = ParserInterface::Instance().GetParameterFrom( $1 ); }
|   STRING_LITERAL
    { $$ = new StringLiteral( *(new std::string($1)) ); }
;

character_cast:
    CHR_KEYWORD
    OPENING_PARENTHESIS
    expression
    CLOSING_PARENTHESIS
    { $$ = ParserInterface::Instance().CastToCharacter($3); }
;

ordinal_cast:
    ORD_KEYWORD
    OPENING_PARENTHESIS
    expression
    CLOSING_PARENTHESIS
    { $$ = ParserInterface::Instance().CastToOrdinal($3); }
;

predecessor:
    PRED_KEYWORD
    OPENING_PARENTHESIS
    expression
    CLOSING_PARENTHESIS
    { $$ = ParserInterface::Instance().GetPredecessorFor($3); }
;

successor:
    SUCC_KEYWORD
    OPENING_PARENTHESIS
    expression
    CLOSING_PARENTHESIS
    { $$ = ParserInterface::Instance().GetSuccessorFor($3); }
;

literal:
    NUMERIC_LITERAL { $$ = new NumericLiteral($1); }
|   CHARACTER_LITERAL { $$ = new CharacterLiteral($1, yyleng); }
;

l_value:
    IDENTIFIER {
        auto str = new std::string($1);
        $$ = ParserInterface::Instance().GetSymbolFor(str);
    }
|   IDENTIFIER
    l_value_access_list {
        auto str = new std::string($1);
        $$ = ParserInterface::Instance().GetSymbolFor(str);
    }
;

l_value_access_list:
    l_value_access
|   l_value_access_list
    l_value_access
;

l_value_access:
    property_access
|   index_access
;

property_access:
    DOT_OPERATOR
    IDENTIFIER
;

index_access:
    OPENING_BRACKET
    expression
    CLOSING_BRACKET
;

%%